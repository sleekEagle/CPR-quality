import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import utils
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt

skip=120

def get_interp_ts_list(files):
    process_ar=[0]*len(files)
    ind_list,ts_list=[],[]
    
    for i in range(len(files)):
        if i%skip!=0:
            continue
        # ts=None
        # j=i
        # while not ts:
        #     color_file=os.path.join(color_dir,files[j])
        #     ts=utils.get_ts_google(color_file)
        #     j+=1
        #     if j==i+skip:
        #         break

        ts=utils.get_ts_google(files[i])
        if ts:
            process_ar[i]=1
            ind_list.append(i)
            ts_list.append(ts)

    ms_list=[utils.get_ms_from_ts(ts) for ts in ts_list]
    intterp_ts_list=[0]*len(files)
    for i,idx in enumerate(ind_list):
        intterp_ts_list[idx]=ms_list[i]
    #interpolate
    ind_list.sort()
    ind_list=np.array(ind_list)
    for i in range(len(intterp_ts_list)):
        if intterp_ts_list[i]==0:
            if i<=ind_list[0]:
                I1,I2=ind_list[0:2]
            elif i>=ind_list[-1]:
                I1,I2=ind_list[-2:]                
            else:
                I1=max(ind_list[ind_list<i])
                I2=min(ind_list[ind_list>i])
            T1,T2=intterp_ts_list[I1],intterp_ts_list[I2]
            t_interp=T2 + (T2-T1)/(I2-I1)*(i-I2)
            intterp_ts_list[i]=t_interp
    return intterp_ts_list


def get_ts_kinect():
    root=r'D:\hand_depth_dataset\kinect'
    dirs=utils.list_subdirectories(root) 
    for dir in dirs:
        print(dir)
        out_file=os.path.join(root,dir,'ts.txt')
        if os.path.exists(out_file):
            print('ts file already exists. continuing...')
            continue
        color_dir=os.path.join(root,dir,'color')
        files=utils.list_files(color_dir,'jpg')
        files=[os.path.join(root,dir,'color',f) for f in files]
        
        intterp_ts_list=get_interp_ts_list(files)
        #save to file
        with open(out_file, 'w') as f:
            for i in range(len(intterp_ts_list)):
                f.write(str(files[i])+','+str(intterp_ts_list[i])+'\n')

def get_ts_canon():
    root=r'D:\hand_depth_dataset\canon'
    dirs=utils.list_subdirectories(root)
    for dir in dirs:
        print(dir)
        out_file=os.path.join(root,dir,'ts.txt')
        if os.path.exists(out_file):
            print('ts file already exists. continuing...')
            continue
        files=utils.list_files(os.path.join(root,dir),'jpg')
        files=[os.path.join(root,dir,f) for f in files]
        intterp_ts_list=get_interp_ts_list(files)
        #save to file
        with open(out_file, 'w') as f:
            for i in range(len(intterp_ts_list)):
                f.write(str(files[i])+','+str(intterp_ts_list[i])+'\n')

def get_ms_ts(file):
    ts=utils.get_ts_google(file)
    if ts:
        ts=utils.get_ms_from_ts(ts)
    return ts
            
def sync_imgs():
    kinect_root=r'D:\hand_depth_dataset\kinect'
    canon_root=r'D:\hand_depth_dataset\canon'
    dirs=utils.list_subdirectories(kinect_root)
    for dir in dirs:
        ts_path=os.path.join(kinect_root,dir,'ts.txt')
        with open(ts_path, 'r') as f:
            lines = f.readlines()
        kinect_files=[l.split(',')[0] for l in lines]
        kinect_ts=np.array([float(l.split(',')[1].strip()) for l in lines])
        
        indices = list(range(0, len(kinect_files), 30))
        selected_kinect_files=[k for i,k in enumerate(kinect_files) if i in indices]
        selected_kinect_ts_list=np.array([k for i,k in enumerate(kinect_ts) if i in indices])


        #get all canon files and ts
        part=dir.split('_')[0]
        canon_dirs=utils.get_dirs_with_str(canon_root,part,i=0,j=1)
        canon_files_list,canon_ts_list=[],[]
        for d in canon_dirs:
            canon_ts_file=os.path.join(canon_root,d,'ts.txt')
            with open(canon_ts_file, 'r') as f:
                lines = f.readlines()
            canon_files=[os.path.join(d,os.path.basename(l.split(',')[0])) for l in lines]
            canon_ts=[float(l.split(',')[1].strip()) for l in lines]
            canon_files_list.extend(canon_files)
            canon_ts_list.extend(canon_ts)

        for ind in indices:
            ts=kinect_ts[ind]
            k_file=kinect_files[ind]
            #find the closest canon image
            closest_idx=np.argmin(np.abs(canon_ts_list-ts))
            canon_ts=canon_ts_list[closest_idx]
            closest_file=canon_files_list[closest_idx]
            #get the kinect images around this canon image
            v=kinect_ts-canon_ts
            if len(v[v<=0])==0:
                kinect_closest_lower_idx=ind
            else:
                kinect_closest_lower_idx=max(np.argwhere(v<=0))[0]
            if len(v[v>=0])==0:
                kinect_closest_upper_idx=ind
            else:
                kinect_closest_upper_idx=min(np.argwhere(v>=0))[0]

            k_lower_file=os.path.join(kinect_root,dir,'color',kinect_files[kinect_closest_lower_idx])
            k_upper_file=os.path.join(kinect_root,dir,'color',kinect_files[kinect_closest_upper_idx])
            k_file=os.path.join(kinect_root,dir,'color',k_file)
            canon_file=closest_file

            #get actual ts from images
            ts=get_ms_ts(k_file)
            k_ts = ts if ts else kinect_ts[ind]

            if k_lower_file==k_file:
                k_lower_ts=k_ts
            else:
                ts=get_ms_ts(k_lower_file)
                k_lower_ts = ts if ts else kinect_ts[kinect_closest_lower_idx]

            if k_upper_file==k_file:
                k_upper_ts=k_ts
            else:
                ts=get_ms_ts(k_upper_file)
                k_upper_ts = ts if ts else kinect_ts[kinect_closest_upper_idx]

            ts=get_ms_ts(canon_file)
            c_ts = ts if ts else canon_ts

            while k_upper_ts<=c_ts:
                kinect_closest_upper_idx+=1
                k_upper_file=os.path.join(kinect_root,dir,'color',kinect_files[kinect_closest_upper_idx])
                ts=get_ms_ts(k_upper_file)
                k_upper_ts = ts if ts else kinect_ts[kinect_closest_upper_idx]

            assert k_lower_ts<=c_ts<=k_upper_ts , 'timestampts not in order'
            
            print(k_lower_ts,k_ts,k_upper_ts,c_ts)
            print('lower , upper:',kinect_closest_lower_idx,kinect_closest_upper_idx)

        pass


if __name__ == "__main__":
    sync_imgs()



# timestamp_str = "12:26:22.439"
# utils.get_ms_from_ts(timestamp_str)




